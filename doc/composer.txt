*composer.txt*	Vim support for Composer PHP projects
Noah Frederick                                       *Composer.vim* *composer*

==============================================================================
CONTENTS                                                   *composer-contents*
  1. Introduction.............................................|composer-intro|
  2. Commands..............................................|composer-commands|
  3. Mappings..................................................|composer-maps|
  4. Autocommands......................................|composer-autocommands|
  5. Functions............................................|composer-functions|
  6. About....................................................|composer-about|

==============================================================================
INTRODUCTION                                                  *composer-intro*

Composer.vim provides conveniences for working with Composer PHP projects.
Some features include:

  * |:Composer| command wrapper around composer with smart completion
  * Navigate to source files using Composer's autoloader
  * Insert use statement for the class/interface/trait under cursor
  * Projectionist support (e.g., :Ecomposer to edit your composer.json, :A to
    jump to composer.lock and back)
  * Dispatch support (|:Dispatch| runs composer dump-autoload)

This plug-in is only available if 'compatible' is not set.

==============================================================================
COMMANDS                                                   *composer-commands*

:Composer[!] [arguments]                                           *:Composer*
  Invoke Composer with [arguments] (with intelligent completion, including
  completion for package names on packagist.org).

==============================================================================
MAPPINGS                                                       *composer-maps*

<Plug>(composer-find)

Find the definition of class, interface, or trait under the cursor using
Composer's autoload mechanism. It is namespace-aware and even resolves aliases
in 'use' statements. For example, it does what you want with the cursor on
'Env' in the last line:
>
  <?php namespace App;

  use Dotenv\Dotenv as Env;

  $env = new Env(__DIR__);
<

<Plug>(composer-use)

Insert a use statement for the class, interface, or trait under the cursor.

<Plug>(composer-namespace)

Insert the namespace statement of current class based on the PSR-4 autoload.

==============================================================================
AUTOCOMMANDS                                           *composer-autocommands*

If you want to set your own Vim settings for buffers belonging to your
Composer project, you may do so from your vimrc using an autocommand:
>
  autocmd User Composer nmap <buffer> gf <Plug>(composer-find)
<

==============================================================================
FUNCTIONS                                                 *composer-functions*

composer#query({key})                                       *composer#query()*
  Query {key} from composer.json for current project.

composer#path_namespace({path})                    *composer#path_namespace()*
  PSR4 namespace for file path

==============================================================================
ABOUT                                                         *composer-about*

Composer.vim is distributed under the same terms as Vim itself (see |license|)

You can find the latest version of this plug-in on GitHub:
https://github.com/noahfrederick/vim-composer

Please report issues on GitHub as well:
https://github.com/noahfrederick/vim-composer/issues


vim:tw=78:ts=8:ft=help:norl:
